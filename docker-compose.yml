version: "3.4"

networks:
  backend:

services:
  apigateway:
    container_name: api-gateway
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "8001:80"
    networks:
      - backend

  engagementsapi:
    container_name: engagements-api
    image: ${DOCKER_REGISTRY-}engagementsapi
    ports:
      - "18004:80"
    build:
      context: ../EngagementsAPI
      dockerfile: EngagementsAPI/Dockerfile
    environment:
      - DB_HOST=engagementsdb
      - DB_NAME=engagements
      - DB_SA_PASSWORD=password1!
    networks:
      - backend

  engagementsdb:
    container_name: engagements-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=password1!
    ports:
      - "18008:1433"
    restart: always
    networks:
      - backend

  usersystemapi:
    container_name: usersystem-api
    image: ${DOCKER_REGISTRY-}usersystemapi
    ports:
      - "18003:80"
    build:
      context: ../UserSystemAPI
      dockerfile: UserSystemAPI/Dockerfile
    environment:
      - DB_HOST=usersystemdb
      - DB_NAME=usersystem
      - DB_SA_PASSWORD=password1!
    networks:
      - backend

  blogapi:
    container_name: blog-api
    image: ${DOCKER_REGISTRY-}blogapi
    ports:
      - "18001:80"
    build:
      context: ../BlogAPI
      dockerfile: BlogAPI/Dockerfile
    environment:
      - DB_HOST=blogdb
      - DB_NAME=blog
      - DB_SA_PASSWORD=password1!
    networks:
      - backend

  blogdb:
    container_name: blog-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=password1!
    ports:
      - "18006:1433"
    restart: always
    networks:
      - backend

  usersystemdb:
    container_name: usersystem-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=password1!
    ports:
      - "18002:1433"
    restart: always
    networks:
      - backend
